{"name":"frappuccino-core","body":"# About Frappuccino\r\n\r\nFrappuccino is an (**experimental**) opinionated, testable, platform-agnostic framework for structuring large scale JavaScript and CoffeeScript applications.  It was developed with the following principles in mind:\r\n\r\n* **Opinionated**: code should be succinct as possible when following convention.\r\n* **DRY**: Frappuccino encourages code reuse and thin controllers by promoting helpers, decorators and mixins.\r\n* **Platform-agnostic, framework-agnostic and testable**: Frappuccino provides a dependency injection container to facilitate the reuse of code across multiple platforms (e.g. client, server, mobile apps), ifferent frameworks (e.g. Knockout.js, Backbone.js, Node.js or Appcelerator Titanium), and execution environments (development, testing, production).\r\n* **Loosely coupled**: Frappuccino implements a modular MVC framework (structured using the module pattern, sandbox pattern and automatic event registration) to ensure independent application modules are loosely coupled, whilst maintaining clearly defined interfaces and access methods between them.\r\n\r\n### Work in progress\r\n\r\nNote that Frappuccino is not (yet!) intended to be a production-ready platform.  Its purpose is to explore and demonstrate some of the best practices for developing applications with JavaScript and CoffeeScript.  Comments and feedback are most welcome at this stage of development.\r\n\r\n### Motivation\r\n\r\nFor some background to the patterns, see my presentation on [Building Large Scale Applications](https://speakerdeck.com/u/jbrunton/p/building-testable-large-scale-applications). (Additionally, [JavaScript Best Practices](https://speakerdeck.com/u/jbrunton/p/javascript-best-practices) may also be of passing interest, as it provides a motivation for restricting the use of jQuery to low-level library code in favor of more structured frameworks and patterns such as the ones in this demo.)\r\n\r\nInspiration for the framework comes from:\r\n\r\n* Addy Osmani, [Building Decoupled Large-scale Applications Using JavaScript](https://speakerdeck.com/u/addyosmani/p/building-decoupled-large-scale-applications-using-javascript-and-jquery)\r\n* Martin Fowler, [Inversion of Control Containers and the Dependency Injection pattern](http://martinfowler.com/articles/injection.html)\r\n* MSDN, <a href=\"http://msdn.microsoft.com/en-us/library/ff921140(v=pandp.40)\">Managing Dependencies Between Components</a> (Prism documentation)\r\n\r\n## See it in action\r\n\r\nA demo application, which highlights some of the interesting features of the framework, is maintained at:\r\n\r\nhttps://github.com/jbrunton/frappuccino-demo\r\n\r\n## Documentation\r\n\r\nThe API docs can be found [here](docs).","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"","google":""}